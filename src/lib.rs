pub mod formula;
pub mod solver;
pub mod utils;

use std::fs;
use std::fs::File;

use formula::*;
use solver::*;
use utils::*;

#[cfg(test)]
mod solver_tests {
    use super::*;
    use crate::formula::CnfFormula;
    use crate::solver::DpllSolver;
    use std::io::Write;
    use tempfile::NamedTempFile;

    fn create_temp_cnf(content: &str) -> NamedTempFile {
        let mut file = NamedTempFile::new().unwrap();
        write!(file, "{}", content).unwrap();
        file
    }

    fn list_all_files(is_sat: bool) -> Vec<NamedTempFile> {
        let dir = if is_sat { "tests/sat" } else { "tests/unsat" };

        let mut vc = Vec::new();
        let paths = fs::read_dir(dir).unwrap();

        for path in paths {}
        vc
    }
    #[test]
    fn t() {
        list_all_files(true);
    }

    #[test]
    fn test_simple_sat() {
        let content = r"
        p cnf 2 2
        1 0
        -1 2 0
        ";
        let file = create_temp_cnf(content);

        let formula = parse_formula_from_cnf_file(file.path()).unwrap();
        let mut solver = DpllSolver::new(formula, 2);
        assert_eq!(solver.dpll_solve(), SatResult::SAT);
    }

    #[test]
    fn test_simple_unsat() {
        let content = r"
        p cnf 1 2
        1 0
        -1 0
        ";
        let file = create_temp_cnf(content);

        let formula = parse_formula_from_cnf_file(file.path()).unwrap();
        let mut solver = DpllSolver::new(formula, 1);
        assert_eq!(solver.dpll_solve(), SatResult::UNSAT);
    }

    #[test]
    fn test_pure_literal_elimination() {
        let content = r"
        p cnf 2 2
        1 2 0
        -2 0
        ";
        let file = create_temp_cnf(content);

        let formula = parse_formula_from_cnf_file(file.path()).unwrap();
        let mut solver = DpllSolver::new(formula, 2);
        assert_eq!(solver.dpll_solve(), SatResult::SAT);
    }

    #[test]
    fn test_unit_propagation() {
        let content = r"
        p cnf 3 3
        1 0
        -1 2 0
        -2 3 0
        ";
        let file = create_temp_cnf(content);

        let formula = parse_formula_from_cnf_file(file.path()).unwrap();
        let mut solver = DpllSolver::new(formula, 3);
        assert_eq!(solver.dpll_solve(), SatResult::SAT);
    }

    #[test]
    fn test_contradiction_after_propagation() {
        let content = r"
        p cnf 2 3
        1 0
        -1 2 0
        -1 -2 0
        ";
        let file = create_temp_cnf(content);

        let formula = parse_formula_from_cnf_file(file.path()).unwrap();
        let mut solver = DpllSolver::new(formula, 2);
        assert_eq!(solver.dpll_solve(), SatResult::UNSAT);
    }

    #[test]
    fn test_backtracking() {
        let content = r"
        p cnf 3 4
        1 2 0
        1 -2 0
        -1 3 0
        -1 -3 0
        ";
        let file = create_temp_cnf(content);

        let formula = parse_formula_from_cnf_file(file.path()).unwrap();
        let mut solver = DpllSolver::new(formula, 3);
        assert_eq!(solver.dpll_solve(), SatResult::UNSAT);
    }

    #[test]
    fn test_empty_formula() {
        let content = "p cnf 0 0";
        let file = create_temp_cnf(content);

        let formula = parse_formula_from_cnf_file(file.path()).unwrap();
        let mut solver = DpllSolver::new(formula, 0);
        assert_eq!(solver.dpll_solve(), SatResult::SAT);
    }

    #[test]
    fn test_empty_clause() {
        let content = r"
        p cnf 2 2
        0
        1 2 0
        ";
        let file = create_temp_cnf(content);

        let formula = parse_formula_from_cnf_file(file.path()).unwrap();
        let mut solver = DpllSolver::new(formula, 2);
        assert_eq!(solver.dpll_solve(), SatResult::UNSAT);
    }

    #[test]
    fn test_random() {
        let content = r"
        c Generated by waerden.py 3 3 9
        c Generator source: https://github.com/aaw/sat/blob/master/gen/waerden.py
        c label:easy
        c label:unsatisfiable
        p cnf 9 32
        1 2 3 0
        2 3 4 0
        3 4 5 0
        4 5 6 0
        5 6 7 0
        6 7 8 0
        7 8 9 0
        1 3 5 0
        2 4 6 0
        3 5 7 0
        4 6 8 0
        5 7 9 0
        1 4 7 0
        2 5 8 0
        3 6 9 0
        1 5 9 0
        -1 -2 -3 0
        -2 -3 -4 0
        -3 -4 -5 0
        -4 -5 -6 0
        -5 -6 -7 0
        -6 -7 -8 0
        -7 -8 -9 0
        -1 -3 -5 0
        -2 -4 -6 0
        -3 -5 -7 0
        -4 -6 -8 0
        -5 -7 -9 0
        -1 -4 -7 0
        -2 -5 -8 0
        -3 -6 -9 0
        -1 -5 -9 0
        ";
        let file = create_temp_cnf(content);

        let formula = parse_formula_from_cnf_file(file.path()).unwrap();
        let mut solver = DpllSolver::new(formula, 9);
        assert_eq!(solver.dpll_solve(), SatResult::UNSAT);
    }
}
